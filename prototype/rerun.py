"""Rerun a robot with given body and parameters."""

import logging
import pickle

from evaluator import Evaluator
from individual import Individual

from revolve2.experimentation.logging import setup_logging

# This is a pickled genotype we optimized.
# You can copy your own parameters from the optimization output log.
PICKLED_GENOTYPE = b'\x80\x04\x95\x84\x13\x00\x00\x00\x00\x00\x00\x8c\nindividual\x94\x8c\nIndividual\x94\x93\x94)\x81\x94}\x94(\x8c\x08genotype\x94h\x05\x8c\x08Genotype\x94\x93\x94)\x81\x94}\x94(\x8c\x05brain\x94\x8cGrevolve2.standards.genotypes.cppnwin._multineat_genotype_pickle_wrapper\x94\x8c\x1eMultineatGenotypePickleWrapper\x94\x93\x94)\x81\x94X\xf1\x08\x00\x00{\n"value0":{\n"value0":0,\n"value1":[\n{\n"value0":{\n"value0":[]\n},\n"value1":1,\n"value2":1,\n"value3":0.0,\n"value4":0.0,\n"value5":0.0,\n"value6":0.0,\n"value7":0,\n"value8":0,\n"value9":1,\n"value10":0.0\n},\n{\n"value0":{\n"value0":[]\n},\n"value1":2,\n"value2":1,\n"value3":0.0,\n"value4":0.0,\n"value5":0.0,\n"value6":0.0,\n"value7":0,\n"value8":0,\n"value9":1,\n"value10":0.0\n},\n{\n"value0":{\n"value0":[]\n},\n"value1":3,\n"value2":1,\n"value3":0.0,\n"value4":0.0,\n"value5":0.0,\n"value6":0.0,\n"value7":0,\n"value8":0,\n"value9":1,\n"value10":0.0\n},\n{\n"value0":{\n"value0":[]\n},\n"value1":4,\n"value2":1,\n"value3":0.0,\n"value4":0.0,\n"value5":0.0,\n"value6":0.0,\n"value7":0,\n"value8":0,\n"value9":1,\n"value10":0.0\n},\n{\n"value0":{\n"value0":[]\n},\n"value1":5,\n"value2":1,\n"value3":0.0,\n"value4":0.0,\n"value5":0.0,\n"value6":0.0,\n"value7":0,\n"value8":0,\n"value9":1,\n"value10":0.0\n},\n{\n"value0":{\n"value0":[]\n},\n"value1":6,\n"value2":1,\n"value3":0.0,\n"value4":0.0,\n"value5":0.0,\n"value6":0.0,\n"value7":0,\n"value8":0,\n"value9":1,\n"value10":0.0\n},\n{\n"value0":{\n"value0":[]\n},\n"value1":7,\n"value2":2,\n"value3":0.0,\n"value4":0.0,\n"value5":0.0,\n"value6":0.0,\n"value7":0,\n"value8":0,\n"value9":1,\n"value10":0.0\n},\n{\n"value0":{\n"value0":[]\n},\n"value1":8,\n"value2":4,\n"value3":3.025,\n"value4":0.0,\n"value5":0.0,\n"value6":0.0,\n"value7":0,\n"value8":0,\n"value9":9,\n"value10":1.0\n}\n],\n"value2":[\n{\n"value0":{\n"value0":[]\n},\n"value1":1,\n"value2":8,\n"value3":1,\n"value4":false,\n"value5":-0.4544869952184381\n},\n{\n"value0":{\n"value0":[]\n},\n"value1":2,\n"value2":8,\n"value3":2,\n"value4":false,\n"value5":0.676048083864304\n},\n{\n"value0":{\n"value0":[]\n},\n"value1":3,\n"value2":8,\n"value3":3,\n"value4":false,\n"value5":-0.5953685570925378\n},\n{\n"value0":{\n"value0":[]\n},\n"value1":4,\n"value2":8,\n"value3":4,\n"value4":false,\n"value5":0.009840582764092401\n},\n{\n"value0":{\n"value0":[]\n},\n"value1":5,\n"value2":8,\n"value3":5,\n"value4":false,\n"value5":0.5120174982690214\n},\n{\n"value0":{\n"value0":[]\n},\n"value1":6,\n"value2":8,\n"value3":6,\n"value4":false,\n"value5":-0.7356904567062617\n},\n{\n"value0":{\n"value0":[]\n},\n"value1":7,\n"value2":8,\n"value3":7,\n"value4":false,\n"value5":-0.5692049290039457\n}\n],\n"value3":7,\n"value4":1,\n"value5":0.0,\n"value6":0.0,\n"value7":0,\n"value8":0.0,\n"value9":false,\n"value10":16384,\n"value11":{\n"value0":[]\n},\n"value12":8,\n"value13":7\n}\n}\x94b\x8c\x04body\x94h\r)\x81\x94X\xa7\t\x00\x00{\n"value0":{\n"value0":0,\n"value1":[\n{\n"value0":{\n"value0":[]\n},\n"value1":1,\n"value2":1,\n"value3":0.0,\n"value4":0.0,\n"value5":0.0,\n"value6":0.0,\n"value7":0,\n"value8":0,\n"value9":1,\n"value10":0.0\n},\n{\n"value0":{\n"value0":[]\n},\n"value1":2,\n"value2":1,\n"value3":0.0,\n"value4":0.0,\n"value5":0.0,\n"value6":0.0,\n"value7":0,\n"value8":0,\n"value9":1,\n"value10":0.0\n},\n{\n"value0":{\n"value0":[]\n},\n"value1":3,\n"value2":1,\n"value3":0.0,\n"value4":0.0,\n"value5":0.0,\n"value6":0.0,\n"value7":0,\n"value8":0,\n"value9":1,\n"value10":0.0\n},\n{\n"value0":{\n"value0":[]\n},\n"value1":4,\n"value2":1,\n"value3":0.0,\n"value4":0.0,\n"value5":0.0,\n"value6":0.0,\n"value7":0,\n"value8":0,\n"value9":1,\n"value10":0.0\n},\n{\n"value0":{\n"value0":[]\n},\n"value1":5,\n"value2":2,\n"value3":0.0,\n"value4":0.0,\n"value5":0.0,\n"value6":0.0,\n"value7":0,\n"value8":0,\n"value9":1,\n"value10":0.0\n},\n{\n"value0":{\n"value0":[]\n},\n"value1":6,\n"value2":4,\n"value3":3.025,\n"value4":0.0,\n"value5":0.0,\n"value6":0.0,\n"value7":0,\n"value8":0,\n"value9":10,\n"value10":1.0\n},\n{\n"value0":{\n"value0":[]\n},\n"value1":7,\n"value2":4,\n"value3":3.025,\n"value4":0.0,\n"value5":0.0,\n"value6":0.0,\n"value7":0,\n"value8":0,\n"value9":10,\n"value10":1.0\n}\n],\n"value2":[\n{\n"value0":{\n"value0":[]\n},\n"value1":1,\n"value2":6,\n"value3":1,\n"value4":false,\n"value5":0.5456837443101523\n},\n{\n"value0":{\n"value0":[]\n},\n"value1":2,\n"value2":6,\n"value3":2,\n"value4":false,\n"value5":0.2225766151110867\n},\n{\n"value0":{\n"value0":[]\n},\n"value1":3,\n"value2":6,\n"value3":3,\n"value4":false,\n"value5":0.13869819784354954\n},\n{\n"value0":{\n"value0":[]\n},\n"value1":4,\n"value2":6,\n"value3":4,\n"value4":false,\n"value5":0.16110704268670845\n},\n{\n"value0":{\n"value0":[]\n},\n"value1":5,\n"value2":6,\n"value3":5,\n"value4":false,\n"value5":0.044524845315174147\n},\n{\n"value0":{\n"value0":[]\n},\n"value1":1,\n"value2":7,\n"value3":6,\n"value4":false,\n"value5":0.26762550975363866\n},\n{\n"value0":{\n"value0":[]\n},\n"value1":2,\n"value2":7,\n"value3":7,\n"value4":false,\n"value5":0.3432962942367168\n},\n{\n"value0":{\n"value0":[]\n},\n"value1":3,\n"value2":7,\n"value3":8,\n"value4":false,\n"value5":-0.8363667190793456\n},\n{\n"value0":{\n"value0":[]\n},\n"value1":4,\n"value2":7,\n"value3":9,\n"value4":false,\n"value5":-0.18570450336414635\n},\n{\n"value0":{\n"value0":[]\n},\n"value1":5,\n"value2":7,\n"value3":10,\n"value4":false,\n"value5":-0.9900463485351121\n}\n],\n"value3":5,\n"value4":2,\n"value5":0.0,\n"value6":0.0,\n"value7":0,\n"value8":0.0,\n"value9":false,\n"value10":16384,\n"value11":{\n"value0":[]\n},\n"value12":7,\n"value13":10\n}\n}\x94bub\x8c\x07fitness\x94G?\xe3\'\x1c\x0e\xc9`\x8aub.'


if __name__ == "__main__":
    setup_logging()

    individual: Individual = pickle.loads(PICKLED_GENOTYPE)

    logging.info(f"Fitness from pickle: {individual.fitness}")

    evaluator = Evaluator(
        headless=False,
        num_simulators=1,
    )
    fitness = evaluator.evaluate([individual.genotype])[0]
    logging.info(f"Rerun fitness: {fitness}")